word32 _init(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31]
// LiveOut: lr
// Trashed: NZCV ip lr r2
// Preserved: r3 sp
_init_entry:
l0001065C:
	return call_weak_fn(lr)
_init_exit:


void fn0001067C()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn0001067C_entry:
l0001067C:
	call Mem0[0x0002200C:word32] (retsize: 0;)
		uses: ip:0x0002200C
	return
fn0001067C_exit:


void fn00010688()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010688_entry:
l00010688:
	call Mem0[0x00022010:word32] (retsize: 0;)
		uses: ip:0x00022010
	return
fn00010688_exit:


void fn00010694()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010694_entry:
l00010694:
	call Mem0[0x00022014:word32] (retsize: 0;)
		uses: ip:0x00022014
	return
fn00010694_exit:


void fn000106A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106A0_entry:
l000106A0:
	call Mem0[0x00022018:word32] (retsize: 0;)
		uses: ip:0x00022018
	return
fn000106A0_exit:


void fn000106AC()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106AC_entry:
l000106AC:
	call Mem0[0x0002201C:word32] (retsize: 0;)
		uses: ip:0x0002201C
	return
fn000106AC_exit:


void fn000106B8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106B8_entry:
l000106B8:
	call Mem0[0x00022020:word32] (retsize: 0;)
		uses: ip:0x00022020
	return
fn000106B8_exit:


void fn000106C4()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106C4_entry:
l000106C4:
	call Mem0[0x00022024:word32] (retsize: 0;)
		uses: ip:0x00022024
	return
fn000106C4_exit:


void fn000106D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106D0_entry:
l000106D0:
	call Mem0[0x00022028:word32] (retsize: 0;)
		uses: ip:0x00022028
	return
fn000106D0_exit:


void fn000106DC()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106DC_entry:
l000106DC:
	call Mem0[0x0002202C:word32] (retsize: 0;)
		uses: ip:0x0002202C
	return
fn000106DC_exit:


void fn000106E8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106E8_entry:
l000106E8:
	call Mem0[0x00022030:word32] (retsize: 0;)
		uses: ip:0x00022030
	return
fn000106E8_exit:


void fn000106F4()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn000106F4_entry:
l000106F4:
	call Mem0[0x00022034:word32] (retsize: 0;)
		uses: ip:0x00022034
	return
fn000106F4_exit:


void fn0001070C()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn0001070C_entry:
l0001070C:
	call Mem0[0x0002203C:word32] (retsize: 0;)
		uses: ip:0x0002203C
	return
fn0001070C_exit:


void fn00010718()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010718_entry:
l00010718:
	call Mem0[0x00022040:word32] (retsize: 0;)
		uses: ip:0x00022040
	return
fn00010718_exit:


void fn00010724()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010724_entry:
l00010724:
	call Mem0[0x00022044:word32] (retsize: 0;)
		uses: ip:0x00022044
	return
fn00010724_exit:


void fn00010730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010730_entry:
l00010730:
	call Mem0[0x00022048:word32] (retsize: 0;)
		uses: ip:0x00022048
	return
fn00010730_exit:


void fn0001073C()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn0001073C_entry:
l0001073C:
	call Mem0[0x0002204C:word32] (retsize: 0;)
		uses: ip:0x0002204C
	return
fn0001073C_exit:


void fn00010748()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010748_entry:
l00010748:
	call Mem0[0x00022050:word32] (retsize: 0;)
		uses: ip:0x00022050
	return
fn00010748_exit:


void fn00010754()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010754_entry:
l00010754:
	call Mem0[0x00022054:word32] (retsize: 0;)
		uses: ip:0x00022054
	return
fn00010754_exit:


void fn00010760()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn00010760_entry:
l00010760:
	call Mem0[0x00022058:word32] (retsize: 0;)
		uses: ip:0x00022058
	return
fn00010760_exit:


void fn0001076C()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc
// Preserved: sp
fn0001076C_entry:
l0001076C:
	call Mem0[0x0002205C:word32] (retsize: 0;)
		uses: ip:0x0002205C
	return
fn0001076C_exit:


void _start()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV fp ip lr pc r0 r1 r2 r3 sp
// Preserved:
_start_entry:
l00010778:
	fn000106F4()
	fn0001076C()
	branch Z l000107B0_thunk_call_weak_fn
l000107B0_thunk_call_weak_fn:
	call_weak_fn(0x00000000)
	return
_start_exit:
l000107A8_1:
l000107AC_1:
l000107B0_1:


word32 call_weak_fn(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31]
// LiveOut: lr
// Trashed: NZCV ip lr r2 r3
// Preserved: sp
call_weak_fn_entry:
l000107B4:
	branch Mem0[0x000107C4 + Mem0[0x000107D0:word32] + Mem0[0x000107D4:word32]:word32] != 0x00000000 l000107CC
l000107CC:
l00010700:
	word32 lr_16
	call Mem0[0x00022038:word32] (retsize: 0;)
		uses: ip:0x00022038,lr:lr_16
		defs: lr:lr_16
	return lr_16
l000107C8_1:
	word32 lr_23
	call lr (retsize: 0;)
		uses: lr:lr
		defs: lr:lr_23
	return lr_23
call_weak_fn_exit:


void deregister_tm_clones(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31]
// LiveOut:
// Trashed: NZCV lr pc r0 r3
// Preserved: sp
deregister_tm_clones_entry:
l000107D8:
	branch Mem0[0x000107FC:word32] != Mem0[0x000107F8:word32] l000107E8
l000107E8:
	word32 r3_8 = Mem0[0x00010800:word32]
	branch r3_8 != 0x00000000 l000107F4
l000107F4:
	word32 lr_15
	call r3_8 (retsize: 0;)
		uses: lr:lr_15
		defs: lr:lr_15
	return
l000107F0_1:
	call lr (retsize: 0;)
		uses: lr:lr
	return
l000107E4_1:
	call lr (retsize: 0;)
		uses: lr:lr
	return
deregister_tm_clones_exit:


void register_tm_clones(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r3
// Preserved: sp
register_tm_clones_entry:
l00010804:
	word32 r1_6 = Mem0[0x00010834:word32] - Mem0[0x00010830:word32]
	branch (r1_6 >> 2) + (r1_6 >> 33) >> 1 != 0x00000000 l00010820
l00010820:
	word32 r3_12 = Mem0[0x00010838:word32]
	branch r3_12 != 0x00000000 l0001082C
l0001082C:
	word32 lr_18
	call r3_12 (retsize: 0;)
		uses: lr:lr_18
		defs: lr:lr_18
	return
l00010828_1:
	call lr (retsize: 0;)
		uses: lr:lr
	return
l0001081C_1:
	call lr (retsize: 0;)
		uses: lr:lr
	return
register_tm_clones_exit:


void __do_global_dtors_aux(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31]
// LiveOut:
// Trashed: NZCV lr pc r0 r3
// Preserved: r4 sp
__do_global_dtors_aux_entry:
l0001083C:
	word32 r4_8 = Mem6[0x00010860:word32]
	branch (word32) Mem6[r4_8:byte] == 0x00000000 l00010850
l00010850:
	deregister_tm_clones(lr)
	Mem21[r4_8:byte] = 0x01
	return
l0001084C_1:
	return
__do_global_dtors_aux_exit:


void frame_dummy(word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r3
// Preserved: sp
frame_dummy_entry:
l00010864:
l00010864_thunk_register_tm_clones:
	register_tm_clones(lr)
	return
frame_dummy_exit:


void cleanUp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV fp ip pc r0 r1 r2 r3 sp
// Preserved:
cleanUp_entry:
l00010868:
	echoSensorCleanUp()
	lineSensorsCleanUp()
	motorsCleanUp()
	fn00010718()
l00010880_thunk_setUp:
	setUp(0x00000000)
	return
cleanUp_exit:


void setUp(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV ip pc r1 r2 r3
// Preserved: fp sp
setUp_entry:
l00010884:
	lineSensorSetup(motorsSet(r0))
	echoSensorSet()
	speedSensorSet()
	return
setUp_exit:


void moveforward(word32 fpscr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fpscr:[2..9]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
moveforward_exit:
moveforward_entry:
l000108A4:
	fn000106E8()
	fn000106D0()
	branch fp == 0x0000005C l00010978
l0001096C:
	fn00010688()
l00010978:
	fn000106D0()
	branch fp == 0x00000060 l000109A8
l0001099C:
	fn00010688()
l000109A8:
	fn000106D0()
	branch fp == 0x00000064 l000109D8
l000109CC:
	fn00010688()
l000109D8:
	fn000106D0()
	branch fp == 0x00000068 l00010A08
l000109FC:
	fn00010688()
l00010A08:
	fn000106E8()
	fn00010754()
	fn00010754()
	fn00010754()
	fn00010754()
l00010B3C:
	branch Test(LE,SLICE(fpscr, bool, 2)) l00010B68
l00010B50:
	branch (uint32) (byte) (isObjectInFront() ^ 0x00000001) != 0x00000000 l00010A54
l00010A54:
	fn000106D0()
	branch fp == 0x0000006C l00010A84
l00010A78:
	fn00010688()
l00010A84:
	fn000106D0()
	branch fp == 0x00000070 l00010AB4
l00010AA8:
	fn00010688()
l00010AB4:
	fn00010754()
	fn00010754()
	readDistance()
l00010B68:
	decreaseMotorPowerToZero()
	readDistance()


void main(word32 fpscr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fpscr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
main_exit:
main_entry:
l00010BC0:
	fn000106AC()
	setUp(0x00000002)
	moveforward(fpscr)


word32 motorsSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut: r0
// Trashed: NZCV ip pc r0 r1 r2 r3
// Preserved: fp sp
motorsSet_entry:
l00010BF8:
	fn00010730()
	branch r0 != 0x00000001 l00010C28
l00010C18:
	fn000106C4()
	fn00010718()
l00010C28:
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010760()
	branch 0x00000000 == 0x00000000 l00010CE0
l00010CD8:
	fn000106C4()
l00010CE0:
	fn00010760()
	branch 0x00000006 == 0x00000000 l00010D08
l00010D00:
	fn000106C4()
l00010D08:
	fn00010760()
	branch 0x0000000C == 0x00000000 l00010D30
l00010D28:
	fn000106C4()
l00010D30:
	fn00010760()
	word32 r0_112 = 0x0000001A
	branch 0x0000001A == 0x00000000 l00010D58
l00010D50:
	r0_112 = Mem116[0x00010D68:word32]
	fn000106C4()
l00010D58:
	return r0_112
motorsSet_exit:


void motorMove(word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r3:[0..31]
// LiveOut:
// Trashed: NZCV ip pc r0 r1
// Preserved: fp r3 sp
motorMove_entry:
l00010D6C:
	fn000106B8()
	fn0001073C()
	branch r3 == 0x00000000 l00010DC8
l00010DC8:
	fn000106B8()
	fn000106B8()
l00010DAC:
	fn000106B8()
	fn000106B8()
l00010DE0:
	return
motorMove_exit:


void decreaseMotorPowerToZero()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r3
// Preserved: fp sp
decreaseMotorPowerToZero_entry:
l00010DEC:
	fn000106B8()
	fn000106B8()
	fn000106B8()
	fn000106B8()
	word32 dwLoc0C_59 = 0x00000014
l00010E70:
	branch dwLoc0C_59 > 0x00000000 l00010E34
l00010E34:
	fn0001073C()
	fn0001073C()
	fn0001073C()
	fn0001073C()
	dwLoc0C_59 = dwLoc0C_59 - 0x0000000A
l00010E7C:
	return
decreaseMotorPowerToZero_exit:


void motorStop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r0 r1
// Preserved: fp sp
motorStop_entry:
l00010E88:
	fn000106B8()
	fn000106B8()
	fn000106B8()
	return
motorStop_exit:


void motorToControlForward(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r2 r3
// Preserved: fp sp
motorToControlForward_entry:
l00010ED0:
	word32 r3_13 = Mem11[r0:word32]
	branch r3_13 != 0x00000001 l00010F10
l00010F10:
	branch r3_13 != 0x00000002 l00010F34
l00010F34:
	branch r3_13 != 0x00000003 l00010F58
l00010F58:
	branch r3_13 != 0x00000004 l00010F78
l00010F64:
	motorMove(0x00000000)
l00010F40:
	motorMove(0x00000001)
l00010F1C:
	motorMove(0x00000000)
l00010EF8:
	motorMove(0x00000000)
l00010F78:
	return
motorToControlForward_exit:


void motorToControlBackward(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r2 r3
// Preserved: fp sp
motorToControlBackward_entry:
l00010F88:
	word32 r3_13 = Mem11[r0:word32]
	branch r3_13 != 0x00000001 l00010FC8
l00010FC8:
	branch r3_13 != 0x00000002 l00010FEC
l00010FEC:
	branch r3_13 != 0x00000003 l00011010
l00011010:
	branch r3_13 != 0x00000004 l00011030
l0001101C:
	motorMove(0x00000001)
l00010FF8:
	motorMove(0x00000000)
l00010FD4:
	motorMove(0x00000001)
l00010FB0:
	motorMove(0x00000001)
l00011030:
	return
motorToControlBackward_exit:


void runMotors()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV ip pc r1 r2 r3
// Preserved: fp sp
runMotors_entry:
l00011040:
	motorMove(0x00000000)
	motorMove(0x00000000)
	motorMove(0x00000001)
	motorMove(0x00000000)
	fn000106DC()
	motorStop()
	motorStop()
	motorStop()
	motorStop()
	fn000106DC()
	motorMove(0x00000001)
	motorMove(0x00000001)
	motorMove(0x00000000)
	motorMove(0x00000001)
	return
runMotors_exit:


void motorsCleanUp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r1 r2
// Preserved: fp sp
motorsCleanUp_entry:
l00011150:
	motorStop()
	motorStop()
	motorStop()
	motorStop()
	return
motorsCleanUp_exit:


void speedSensorSet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r0 r1
// Preserved: fp sp
speedSensorSet_entry:
l000111A0:
	fn00010730()
	fn00010724()
	fn00010724()
	fn00010724()
	fn00010724()
	return
speedSensorSet_exit:


void writeSpeed(word32 r0, word64 d0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..63] r0:[0..31]
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: fp r0 sp
writeSpeed_entry:
l000111E4:
	Mem18[Mem10[0x00011220:word32] + (r0 << 3):word64] = d0
	return
writeSpeed_exit:


void readSpeed(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: ip pc q0 q3 r0 r2 r3
// Preserved: fp sp
readSpeed_entry:
l00011224:
	fn000106A0()
	word64 r3_r2_19 = Mem11[Mem11[0x00011274:word32] + (r0 << 3):word64]
	fn0001067C()
	__vmov_f64((word64) SLICE(r3_r2_19, word32, 0))()
	return
readSpeed_exit:


void calculateAngularSpeed(word32 r0, word64 d0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..63] r0:[0..31]
// LiveOut:
// Trashed: q0 q2 q3 r3
// Preserved: fp sp
calculateAngularSpeed_entry:
l00011278:
	__vmov_f64(__vmov_f64(__vmul_f64((real64) r0, Mem10[0x000112C8:word32]) / __vmul_f64(d0, Mem10[0x000112D0:word32]))())()
	return
calculateAngularSpeed_exit:


void calculateLinearSpeed()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
calculateLinearSpeed_exit:
calculateLinearSpeed_entry:
l000112D8:


void readPulses()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
readPulses_exit:
readPulses_entry:
l00011318:
	fn00010748()


void useSpeedSensor()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
useSpeedSensor_exit:
useSpeedSensor_entry:
l000113F8:
	readPulses()


void averageSpeed()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
averageSpeed_exit:
averageSpeed_entry:
l000114F0:
	__vadd_f64(Mem13[Mem13[0x00011550:word32]:word64], Mem13[Mem13[0x00011550:word32] + 16:word64])
	fn00010688()


void readLinePin()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r3
// Preserved: fp r0 sp
readLinePin_entry:
l00011558:
	fn00010694()
	return
readLinePin_exit:


void lineSensorsCleanUp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r0 r1
// Preserved: fp sp
lineSensorsCleanUp_entry:
l00011580:
	fn000106B8()
	fn000106B8()
	fn000106B8()
	return
lineSensorsCleanUp_exit:


void lineSensorSetup(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV ip pc r0 r1 r3
// Preserved: fp sp
lineSensorSetup_entry:
l000115B4:
	fn00010730()
	branch r0 != 0x00000001 l000115E4
l000115D4:
	fn000106E8()
	fn00010718()
l000115E4:
	fn00010724()
	fn00010724()
	fn00010724()
	return
lineSensorSetup_exit:


void isOnLine(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV ip pc r0 r3
// Preserved: fp sp
isOnLine_entry:
l00011618:
	fn00010694()
	branch r0 != 0x00000001 l0001163C
l00011638_1:
l0001163C:
	branch r0 == 0x00000001 l00011640
l0001163C_1:
l00011640:
	return
isOnLine_exit:


word32 isObjectInFront()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV ip pc r0 r3
// Preserved: fp sp
isObjectInFront_entry:
l00011650:
	word32 r3_21
	fn00010694()
	branch true l00011680
l0001166C:
	fn00010694()
	branch 0x00000007 == 0x00000000 l00011688
l00011688:
	r3_21 = 0x00000000
l00011680:
	r3_21 = 0x00000001
l0001168C:
	return (uint32) (byte) (r3_21 & 0x00000001)
isObjectInFront_exit:


void echoSensorSet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r0 r1
// Preserved: fp sp
echoSensorSet_entry:
l000116A0:
	fn00010730()
	fn00010724()
	fn00010724()
	fn000106B8()
	fn000106B8()
	return
echoSensorSet_exit:


void calculateDistance(word64 d0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..63]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
calculateDistance_exit:
calculateDistance_entry:
l000116E4:
	__vmul_f64(d0, Mem9[0x00011720:word32])


void prepareTrigger()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r0 r1
// Preserved: fp sp
prepareTrigger_entry:
l00011730:
	fn000106B8()
	fn000106DC()
	fn000106B8()
	return
prepareTrigger_exit:


word128 getTime()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: q0
// Trashed: NZCV ip pc q0 q2 q3 r0 r2 r3
// Preserved: fp sp
getTime_entry:
l00011760:
l0001177C:
	fn00010694()
	branch 0x00000016 == 0x00000000 l0001177C
l00011790:
	fn0001070C()
l0001179C:
	fn00010694()
	branch 0x00000015 == 0x00000000 l0001179C
l000117B0:
	fn0001070C()
	word64 d7_43 = (real64) 0x00000000 / Mem36[0x000117F8:word32]
	fn00010688()
	return __vmov_f64((word64) SLICE(d7_43, word32, 0))()
getTime_exit:


void useEchoSensor()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
useEchoSensor_exit:
useEchoSensor_entry:
l00011804:
	fn000106E8()
l0001181C:
	prepareTrigger()
	calculateDistance(__vmov_f64(__vmov_f64(SLICE(getTime(), word64, 0))())())


void readDistance()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
readDistance_exit:
readDistance_entry:
l00011848:
	prepareTrigger()
	calculateDistance(__vmov_f64(__vmov_f64(SLICE(getTime(), word64, 0))())())


void displayDistance()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
displayDistance_exit:
displayDistance_entry:
l00011880:
	prepareTrigger()
	calculateDistance(__vmov_f64(__vmov_f64(SLICE(getTime(), word64, 0))())())


void echoSensorCleanUp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: ip pc r0 r1
// Preserved: fp sp
echoSensorCleanUp_entry:
l000118B4:
	fn000106B8()
	fn000106B8()
	return
echoSensorCleanUp_exit:


void __libc_csu_init(word32 r0, word32 r1, word32 r2, word32 r10, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31] r0:[0..31] r1:[0..31] r10:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV ip lr pc r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
__libc_csu_init_entry:
l000118DC:
	word32 r5_25 = 0x000118F8 + Mem18[0x00011938:word32]
	word32 r6_26 = 0x000118F4 + Mem18[0x00011934:word32] - r5_25
	word32 r7_21 = r0
	word32 r8_28 = r1
	word32 r9_30 = r2
	word32 lr_32 = _init(lr)
	word32 r6_38 = r6_26 >> 2
	branch r6_26 >> 2 != 0x00000000 l0001190C
l0001190C:
	word32 r4_41 = 0x00000000
l00011910:
	word32 pc_69
	word32 r3_72
	call Mem18[r5_25:word32] (retsize: 0;)
		uses: lr:lr_57,pc:pc_69,r0:r7_53,r1:r8_51,r10:r10_56,r2:r9_49,r3:r3_72,r4:r4_42 + 0x00000001,r5:r5_44 + 4,r6:r6_55,r7:r7_53,r8:r8_51,r9:r9_49
		defs: lr:lr_67,pc:pc_69,r10:r10_66,r3:r3_72,r4:r4_60,r5:r5_61,r6:r6_62,r7:r7_63,r8:r8_64,r9:r9_65
	branch r6_38 != r4_41 l00011910
l00011930:
	return
l00011908_1:
	return
__libc_csu_init_exit:


void __libc_csu_fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__libc_csu_fini_entry:
l0001193C:
	return
__libc_csu_fini_exit:


void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: r3 sp
_fini_entry:
l00011940:
	return
_fini_exit:


